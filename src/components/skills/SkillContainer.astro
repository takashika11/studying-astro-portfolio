---
import SkillCard from './SkillCard.astro'

const skillCateogries = [
  {
		 name: 'フロントエンド',
    skills: [
      {
        name: 'HTML',
        icon: 'skill-icons:html',
        description: 'セマンティックなマークアップとアクセシビリティを重視した実装も得意です',
        experience: 5,
        level: 5,
        interest: 3,
      },
      {
        name: 'CSS',
        icon: 'skill-icons:css',
        description: 'Flexbox, Grid などのデザインを重視した実装も得意です',
        experience: 5,
        level: 5,
        interest: 3,
      },
      {
        name: 'JavaScript',
        icon: 'skill-icons:javascript',
        description: 'ES6+ の構文を使用した実装も得意です',
        experience: 5,
        level: 4,
        interest: 4,
      },
      {
        name: 'Astro',
        icon: 'skill-icons:astro',
        description: 'Astro を使用した実装も得意です',
        experience: 2,
        level: 3,
        interest: 5,
      },
    ],
  },
  {
		name: 'バックエンド',
    skills: [
      {
        name: 'Node.js',
        icon: 'skill-icons:nodejs-dark',
        description: 'ツールの作成やアプリの開発に使っています',
        experience: 4,
        level: 3,
        interest: 3,
      },
      {
        name: 'Express',
        icon: 'skill-icons:expressjs-dark',
        description: 'Node.js を使って API を開発するのに使っています',
        experience: 2,
        level: 2,
        interest: 3,
      },
    ],
  },
  {
    name: 'データベース',
    skills: [
      {
        name: 'PostgreSQL',
        icon: 'skill-icons:postgresql-dark',
        description: 'RDB を使う際に選んでいます',
        experience: 4,
        level: 3,
        interest: 3,
      },
      {
        name: 'MongoDB',
        icon: 'skill-icons:mongodb',
        description: 'NoSQL を使う際に選んでいます',
        experience: 3,
        level: 3,
        interest: 3,
      },
    ],
  },
  {
		name: 'DevOps・インフラ',
		skills: [
			{
				name: 'Google Cloud',
				icon: 'skill-icons:gcp-dark',
				description: 'Cloud Functionsでのバッジ処理や Cloud Runでのアプリの公開につかっています。',
				experience: 4,
				level: 2,
				interest: 5,
			},
			{
				name: 'GitHub',
				icon: 'skill-icons:github-dark',
				description: 'ソースコードの管理に使っています。自動化のために GitHub Actions も使っています',
				experience: 5,
				level: 3,
				interest: 5,
			},
			{
				name: 'Docker',
				icon: 'skill-icons:docker',
				description: 'サーバーサイドのアプリを Cloud Run にデプロイする際に使っています。',
				experience: 4,
				level: 3,
				interest: 3,
			},
		],
	},
]
---

<div class='skill-container'>
  {
    skillCateogries.map((category) => (
      <section class='skill-category'>
        <h2 class='category-title'>{category.name}</h2>
        <div class='skill-grid'>
          {category.skills.map((skill,index) => (
            <div class='skill-card-wrapper' style={`--animation-order: ${index}`}>
              <SkillCard {...skill} />
            </div>
          ))}
        </div>
      </section>
    ))
  }
</div>

<style>
  .skill-container {
    display: grid;
    gap: 2rem;
  }

  .skill-category {
    background: var(--gradient-bg);
    padding: 1.5rem;
    border-radius: 8px;
  }

  .categoty-title {
    font-size: 1.5rem;
    margin-bottom: 1rem;
    color: var(--text-color);
  }

  .skill-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-top: 1rem;
  }

  .skill-card-wrapper {
    opacity: 0;
    transform: translateY(20px);
  }

  .skill-card-wrapper.animate {
    animation: fadeInUp 0.6s ease forwards;
    animation-delay: calc(var(--animation-order) * 0.15s);
  }

  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded',() => {
      const observer = new IntersectionObserver(
        (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.querySelectorAll('.skill-card-wrapper').forEach((card) => {
              card.classList.add('animate')
            })

            observer.unobserve(entry.target)  
          }
        })
      },
      //要素が画面の１０％の位置に入ったらアニメーションを開始する
      { threshold: 0.1 }
    )

    //すべてのスキルカードを監視する。
    document.querySelectorAll('.skill-category').forEach((category) => {
      observer.observe(category)
    })
    })
  </script>